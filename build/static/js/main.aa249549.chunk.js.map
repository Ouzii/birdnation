{"version":3,"sources":["components/Map.js","components/ObservationCard.js","services/observations.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","parseFloat","lng","_this2","MapWithMarker","withGoogleMap","react_default","a","createElement","react_google_maps_lib","defaultCenter","defaultZoom","mark","position","containerElement","style","height","width","mapElement","React","Component","ObservationCard","objectSpread","observation","extended","setState","lib","onClick","toggleExtended","cursor","species","rarity","latitude","longitude","notes","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Date","time","components_Map","substring","baseUrl","getAll","_ref","asyncToGenerator","regenerator_default","_callee","response","wrap","_context","prev","next","axios","get","headers","Content-Type","sent","abrupt","data","stop","apply","arguments","getOne","_ref2","_callee2","id","_context2","concat","_x","observations","create","_ref3","_callee3","newObject","_context3","post","_x2","remove","_ref4","_callee4","_context4","delete","_x3","App","getCurrentPosition","options","length","undefined","Promise","resolve","reject","navigator","geolocation","loadPosition","_position$coords","coords","console","log","t0","observationService","obs","localObservations","JSON","parse","window","localStorage","getItem","setItem","stringify","map","components_ObservationCard","key","Boolean","location","hostname","match","document","write","process","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa249549.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            lat: parseFloat(this.props.lat),\r\n            lng: parseFloat(this.props.lng)\r\n        }\r\n    }\r\n\r\n    \r\n  render() {\r\n    const MapWithMarker = withGoogleMap(props => (\r\n        <GoogleMap\r\n          defaultCenter = { this.state }\r\n          defaultZoom = { 10 }\r\n          mark\r\n        >\r\n        <Marker position={ this.state } />\r\n        </GoogleMap>\r\n     ));\r\n     \r\n    return (\r\n      <div>\r\n        <MapWithMarker\r\n          containerElement={ <div style={{ height: `250px`, width: '250px' }} /> }\r\n          mapElement={ <div style={{ height: `100%` }} /> }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map\r\n","import { Card, CardBody } from 'react-simple-card';\r\nimport Map from './Map';\r\nimport React from 'react';\r\n\r\nclass ObservationCard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ...props.observation, extended: false\r\n        }\r\n    }\r\n\r\n    toggleExtended() {\r\n        this.setState({ ...this.state, extended: !this.state.extended })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                {this.state.extended ?\r\n                    <Card >\r\n                        <div onClick={() => this.toggleExtended()} style={{ cursor: \"pointer\" }}>\r\n                        <h4>{this.state.species}</h4>\r\n                        \r\n                        <CardBody>\r\n                            <div onClick={() => this.toggleExtended()} style={{ cursor: \"pointer\" }}>\r\n                            Rarity: {this.state.rarity}<br></br>\r\n                            Location: {this.state.latitude}, {this.state.longitude}<br></br>\r\n                            Notes: {this.state.notes}<br></br>\r\n                            Observed: {new Intl.DateTimeFormat('en-GB', {\r\n                                year: 'numeric',\r\n                                month: 'long',\r\n                                day: '2-digit',\r\n                                hour: '2-digit',\r\n                                minute: '2-digit',\r\n                                second: '2-digit'\r\n\r\n                            }).format(new Date(this.state.time))}<br></br>\r\n                            </div>\r\n                            \r\n                        </CardBody>\r\n                        </div>\r\n                        <Map lat={this.state.latitude} lng={this.state.longitude}/>\r\n                    </Card>\r\n                    :\r\n                    <div onClick={() => this.toggleExtended()} style={{ cursor: \"pointer\" }}>\r\n                    <Card >\r\n                        <h4>{this.state.species}</h4> <br></br>\r\n                        {this.state.notes.substring(0, 15)}...\r\n                    </Card>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ObservationCard","import axios from 'axios'\r\n\r\nconst baseUrl = 'https://birdnation.herokuapp.com/api/observations'\r\n\r\nconst config = () => {\r\n    return {\r\n        headers: { 'Content-Type': 'Application/json' }\r\n    }\r\n}\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl, config())\r\n    return response.data\r\n}\r\n\r\nconst getOne = async (id) => {\r\n    const response = await axios.get(`${baseUrl}/${id}`, config())\r\n    return response.data\r\n}\r\n\r\nconst create = async (newObject) => {\r\n    const response = await axios.post(baseUrl, newObject, config())\r\n    return response.data\r\n}\r\n\r\nconst remove = async (id) => {\r\n    const response = await axios.delete(`${baseUrl}/${id}`, config())\r\n    return response\r\n}\r\n\r\nexport default { getAll, create, remove, getOne }","import React from 'react';\nimport ObservationCard from './components/ObservationCard';\nimport observationService from './services/observations';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      observations: null\n    }\n  }\n\n\n  async componentDidMount() {\n    const obs = await observationService.getAll();\n    const localObservations = JSON.parse(window.localStorage.getItem('observations'));\n    if (obs !== localObservations) {\n      window.localStorage.setItem('observations', JSON.stringify(obs));\n    }\n    if (this.state.observations !== obs) {\n      this.setState({ observations: obs })\n    }\n    \n  }\n\n  getCurrentPosition = (options = {}) => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options)\n    })\n  }\n\n  loadPosition = async () => {\n    try {\n      const position = await this.getCurrentPosition()\n      const { latitude, longitude } = position.coords\n      console.log(position)\n      return { latitude, longitude }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>Birdnation</h1>\n        {this.state.observations ?\n          this.state.observations.map(obs => <ObservationCard observation={obs} key={obs.id}/>)\n          :\n          <p>No observations</p>}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\ndocument.write(`<script src=https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_MAP_API_KEY}></script>`)\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}