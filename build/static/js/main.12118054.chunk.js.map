{"version":3,"sources":["components/Map.js","components/ObservationCard.js","services/observations.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","parseFloat","lng","_this2","MapWithMarker","withGoogleMap","react_default","a","createElement","react_google_maps_lib","defaultCenter","defaultZoom","mark","position","containerElement","style","height","width","marginLeft","marginRight","mapElement","React","Component","ObservationCard","resize","setState","objectSpread","observation","extended","window","addEventListener","removeEventListener","lib","className","onClick","toggleExtended","species","cursor","rarity","latitude","longitude","notes","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Date","time","components_Map","substring","baseUrl","getAll","_ref","asyncToGenerator","regenerator_default","_callee","response","wrap","_context","prev","next","axios","get","headers","Content-Type","sent","abrupt","data","stop","apply","arguments","getOne","_ref2","_callee2","id","_context2","concat","_x","observations","create","_ref3","_callee3","newObject","_context3","post","_x2","remove","_ref4","_callee4","_context4","delete","_x3","App","getCurrentPosition","options","length","undefined","Promise","resolve","reject","navigator","geolocation","loadPosition","_position$coords","coords","console","log","t0","sortedBy","observationService","obs","localObservations","JSON","parse","localStorage","getItem","setItem","stringify","alert","map","components_ObservationCard","key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12118054.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            lat: parseFloat(this.props.lat),\r\n            lng: parseFloat(this.props.lng)\r\n        }\r\n    }\r\n\r\n    \r\n  render() {\r\n    const MapWithMarker = withGoogleMap(props => (\r\n        <GoogleMap\r\n          defaultCenter = { this.state }\r\n          defaultZoom = { 10 }\r\n          mark\r\n        >\r\n        <Marker position={ this.state } />\r\n        </GoogleMap>\r\n     ));\r\n     \r\n    return (\r\n      <div>\r\n        <MapWithMarker\r\n          containerElement={ <div style={{ height: `250px`, width: '250px', marginLeft: 'auto', marginRight: 'auto' }} /> }\r\n          mapElement={ <div style={{ height: `100%` }} /> }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map\r\n","import { Card, CardBody } from 'react-simple-card';\r\nimport Map from './Map';\r\nimport React from 'react';\r\n\r\nclass ObservationCard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ...props.observation, extended: false\r\n        }\r\n    }\r\n\r\n    resize = () => {\r\n        this.setState(this.state)\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.resize)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize)\r\n    }\r\n\r\n    toggleExtended() {\r\n        this.setState({ ...this.state, extended: !this.state.extended })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.extended ?\r\n                    <Card className='cardReact'>\r\n                        <div onClick={() => this.toggleExtended()} >\r\n                        <h4>{this.state.species}</h4>\r\n                        \r\n                        <CardBody>\r\n                            <div onClick={() => this.toggleExtended()} style={{ cursor: \"pointer\" }}>\r\n                            Rarity: {this.state.rarity}<br></br>\r\n                            Location: {this.state.latitude}, {this.state.longitude}<br></br>\r\n                            Notes: {this.state.notes}<br></br>\r\n                            Observed: {new Intl.DateTimeFormat('en-GB', {\r\n                                year: 'numeric',\r\n                                month: 'long',\r\n                                day: '2-digit',\r\n                                hour: '2-digit',\r\n                                minute: '2-digit',\r\n                                second: '2-digit'\r\n\r\n                            }).format(new Date(this.state.time))}<br></br>\r\n                            </div>\r\n                            \r\n                        </CardBody>\r\n                        </div>\r\n                        <Map lat={this.state.latitude} lng={this.state.longitude}/>\r\n                    </Card>\r\n                    :\r\n                    <div onClick={() => this.toggleExtended()} >\r\n                    <Card className='cardReact'>\r\n                        <h4>{this.state.species}</h4> <br></br>\r\n                        {this.state.notes.substring(0, 15)}...\r\n                    </Card>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ObservationCard","import axios from 'axios'\r\n\r\nconst baseUrl = 'https://birdnation.herokuapp.com/api/observations'\r\n\r\nconst config = () => {\r\n    return {\r\n        headers: { 'Content-Type': 'Application/json' }\r\n    }\r\n}\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl, config())\r\n    return response.data\r\n}\r\n\r\nconst getOne = async (id) => {\r\n    const response = await axios.get(`${baseUrl}/${id}`, config())\r\n    return response.data\r\n}\r\n\r\nconst create = async (newObject) => {\r\n    const response = await axios.post(baseUrl, newObject, config())\r\n    return response.data\r\n}\r\n\r\nconst remove = async (id) => {\r\n    const response = await axios.delete(`${baseUrl}/${id}`, config())\r\n    return response\r\n}\r\n\r\nexport default { getAll, create, remove, getOne }","import React from 'react';\nimport ObservationCard from './components/ObservationCard';\nimport observationService from './services/observations';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      observations: null,\n      sortedBy: 'species'\n    }\n  }\n\n\n  async componentDidMount() {\n    const obs = await observationService.getAll();\n    const localObservations = JSON.parse(window.localStorage.getItem('observations'));\n    if (obs !== localObservations) {\n      window.localStorage.setItem('observations', JSON.stringify(obs));\n    }\n    if (this.state.observations !== obs) {\n      this.setState({ observations: obs })\n    }\n    \n  }\n\n  getCurrentPosition = (options = {}) => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options)\n    })\n  }\n\n  loadPosition = async () => {\n    try {\n      const position = await this.getCurrentPosition()\n      const { latitude, longitude } = position.coords\n      console.log(position)\n      return { latitude, longitude }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>Birdnation</h1>\n        <button onClick={() => window.alert(\"To be implemented\")}>Add a new observation</button>\n        <br></br>\n        <br></br>\n        <button onClick={() => window.alert(\"To be implemented\")}>Sort by: {this.state.sortedBy}</button>\n        <br></br>\n        <br></br>\n        {this.state.observations ?\n          this.state.observations.map(obs => <ObservationCard observation={obs} key={obs.id}/>)\n          :\n          <p>No observations</p>}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}